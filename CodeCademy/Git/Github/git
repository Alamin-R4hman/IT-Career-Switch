Git workflow:

A Working Directory: where you’ll be doing all the work: creating, editing, deleting and organizing files

A Staging Area: where you’ll list changes you make to the working directory

A Repository: where Git permanently stores those changes as different versions of the project

The Git workflow consists of editing files in the working directory, adding files to the staging area, and saving changes to a Git repository. In Git, we save changes with a 
commit, which we will learn more about in this lesson.

![alt text](image.png)

Generalizations:

You have now been introduced to the fundamental Git workflow. You learned a lot! Let’s take a moment to generalize:

Git is the industry-standard version control system for web developers
Use Git commands to help keep track of changes made to a project:
git init creates a new Git repository
git status inspects the contents of the working directory and staging area
git add adds files from the working directory to the staging area (git add "filename")
git diff shows the difference between the working directory and the staging area
git commit permanently stores file changes from the staging area in the repository (git commit -m "")
git log shows a list of all previous commits

Head Commit:

![alt text](image-1.png)

git reset review:

To better understand git reset commit_SHA, notice the diagram on the right. Each circle represents a 
commit.

Before reset:

HEAD is at the most recent commit
After resetting:

HEAD goes to a previously made commit of your choice
The gray commits are no longer part of your project
You have in essence rewound the project’s history

Let’s take a moment to review the new commands:

git checkout HEAD filename: Discards changes in the working directory.
git reset HEAD filename: Unstages file changes in the staging area.
git reset commit_SHA: Resets to a previous commit in your commit history.

Additionally, you learned a way to add multiple files to the staging area with a single command:

git add filename_1 filename_2

While working on a file, you find a small bug in a separate file from a previous commit that needs to be fixed before you continue.

$ git stash

Running the command above will store your work temporarily for later use in a hidden directory.

Once the bug is fixed, you want to retrieve the code you were working on previously, you can “pop” the work that was stored when you used git stash.

$ git stash pop

From here, you can continue your work and commit it when ready.

Git Stash: Temporarily save changes with git stash to switch branches without committing. Retrieve them later with git stash pop.

Git Log: View commit history with git log. Use --oneline for a brief view, -S "keyword" to find specific changes, and --graph for a visual history.

Git Commit Amend: Use git commit --amend to update the last commit. Add --no-edit to keep the same message.

Git Alias Commands: Create shortcuts for commands using git config --global alias.<alias> "<command>" to simplify workflows.
